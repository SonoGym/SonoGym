seed: 42


# Models are instantiated using skrl's model instantiator utility
# https://skrl.readthedocs.io/en/latest/api/utils/model_instantiators.html
# Models are instantiated using skrl's model instantiator utility
# https://skrl.readthedocs.io/en/latest/api/utils/model_instantiators.html
models:
  separate: True
  policy:  # see gaussian_model parameters
    class: DeterministicMixin # CategoricalMixin # 
    clip_actions: False
    clip_log_std: True
    min_log_std: -20.0
    max_log_std: 2.0
    initial_log_std: 0.0
    network:
      - name: features_extractor
        input: STATES  # PyTorch NHWC -> NCHW
        layers:
          - conv2d: {out_channels: 32, kernel_size: 8, stride: 2, padding: 0}
          - conv2d: {out_channels: 64, kernel_size: 4, stride: 2, padding: 0}
          - conv2d: {out_channels: 64, kernel_size: 4, stride: 2, padding: 0}
          - conv2d: {out_channels: 64, kernel_size: 3, stride: 1, padding: 0}
          - flatten
        activations: relu
      - name: net
        input: features_extractor
        layers: [512, 256, 128]
        activations: elu
    output: ACTIONS
  target_policy:  # see gaussian_model parameters
    class: DeterministicMixin # CategoricalMixin # 
    clip_actions: False
    clip_log_std: True
    min_log_std: -20.0
    max_log_std: 2.0
    initial_log_std: 0.0
    network:
      - name: features_extractor
        input: STATES  # PyTorch NHWC -> NCHW
        layers:
          - conv2d: {out_channels: 32, kernel_size: 8, stride: 2, padding: 0}
          - conv2d: {out_channels: 64, kernel_size: 4, stride: 2, padding: 0}
          - conv2d: {out_channels: 64, kernel_size: 4, stride: 2, padding: 0}
          - conv2d: {out_channels: 64, kernel_size: 3, stride: 1, padding: 0}
          - flatten
        activations: relu
      - name: net
        input: features_extractor
        layers: [512, 256, 128]
        activations: elu
    output: ACTIONS
  critic_1:  # see deterministic_model parameters
    class: DeterministicMixin
    clip_actions: False
    network:
      - name: features_extractor
        input: STATES  # PyTorch NHWC -> NCHW
        layers:
          - conv2d: {out_channels: 32, kernel_size: 8, stride: 2, padding: 0}
          - conv2d: {out_channels: 64, kernel_size: 4, stride: 2, padding: 0}
          - conv2d: {out_channels: 64, kernel_size: 4, stride: 2, padding: 0}
          - conv2d: {out_channels: 64, kernel_size: 3, stride: 1, padding: 0}
          - flatten
        activations: relu
      - name: act_net
        input: ACTIONS
        layers: [512, 256, 128]
        activations: elu
      - name: net
        input: concatenate([features_extractor, act_net])
        layers: [512, 256, 128]
        activations: elu
    output: ONE
  critic_2:  # see deterministic_model parameters
    class: DeterministicMixin
    clip_actions: False
    network:
      - name: features_extractor
        input: STATES  # PyTorch NHWC -> NCHW
        layers:
          - conv2d: {out_channels: 32, kernel_size: 8, stride: 2, padding: 0}
          - conv2d: {out_channels: 64, kernel_size: 4, stride: 2, padding: 0}
          - conv2d: {out_channels: 64, kernel_size: 4, stride: 2, padding: 0}
          - conv2d: {out_channels: 64, kernel_size: 3, stride: 1, padding: 0}
          - flatten
        activations: relu
      - name: act_net
        input: ACTIONS
        layers: [512, 256, 128]
        activations: elu
      - name: net
        input: concatenate([features_extractor, act_net])
        layers: [512, 256, 128]
        activations: elu
    output: ONE
  target_critic_1:  # see deterministic_model parameters
    class: DeterministicMixin
    clip_actions: False
    network:
      - name: features_extractor
        input: STATES  # PyTorch NHWC -> NCHW
        layers:
          - conv2d: {out_channels: 32, kernel_size: 8, stride: 2, padding: 0}
          - conv2d: {out_channels: 64, kernel_size: 4, stride: 2, padding: 0}
          - conv2d: {out_channels: 64, kernel_size: 4, stride: 2, padding: 0}
          - conv2d: {out_channels: 64, kernel_size: 3, stride: 1, padding: 0}
          - flatten
        activations: relu
      - name: act_net
        input: ACTIONS
        layers: [512, 256, 128]
        activations: elu
      - name: net
        input: concatenate([features_extractor, act_net])
        layers: [512, 256, 128]
        activations: elu
    output: ONE
  target_critic_2:  # see deterministic_model parameters
    class: DeterministicMixin
    clip_actions: False
    network:
      - name: features_extractor
        input: STATES  # PyTorch NHWC -> NCHW
        layers:
          - conv2d: {out_channels: 32, kernel_size: 8, stride: 2, padding: 0}
          - conv2d: {out_channels: 64, kernel_size: 4, stride: 2, padding: 0}
          - conv2d: {out_channels: 64, kernel_size: 4, stride: 2, padding: 0}
          - conv2d: {out_channels: 64, kernel_size: 3, stride: 1, padding: 0}
          - flatten
        activations: relu
      - name: act_net
        input: ACTIONS
        layers: [512, 256, 128]
        activations: elu
      - name: net
        input: concatenate([features_extractor, act_net])
        layers: [512, 256, 128]
        activations: elu
    output: ONE


# Rollout memory
# https://skrl.readthedocs.io/en/latest/api/memories/random.html
memory:
  class: RandomMemory
  memory_size: -1  # automatically determined (same as agent:rollouts)


# PPO agent configuration (field names are from PPO_DEFAULT_CONFIG)
# https://skrl.readthedocs.io/en/latest/api/agents/ppo.html
agent:
  class: TD3
  rollouts: 1000
  gradient_steps: 1           # gradient steps
  batch_size: 64              # training batch size

  discount_factor: 0.99       # discount factor (gamma)
  polyak: 0.005               # soft update hyperparameter (tau)

  actor_learning_rate: 0.0001   # actor learning rate
  critic_learning_rate: 0.001  # critic learning rate

  random_timesteps: 0        # random exploration steps
  learning_starts: 100         # learning starts after this many steps

  grad_norm_clip: 0           # clipping coefficient for the norm of the gradients

  exploration:
    noise: GaussianNoise
    noise_kwargs:               # exploration noise
      mean: 0.0
      std: 0.1
    initial_scale: 1.0       # initial scale for the noise
    final_scale: 0.001        # final scale for the noise
    timesteps: 200000          # timesteps for the noise decay

  policy_delay: 2                      # policy delay update with respect to critic update
  smooth_regularization_noise: GaussianNoise    # smooth noise for regularization
  smooth_regularization_noise_kwargs:               # exploration noise
    mean: 0.0
    std: 0.2
  smooth_regularization_clip: 0.5      # clip for smooth regularization

  rewards_shaper: None         # rewards shaping function: Callable(reward timestep timesteps) -> reward

  mixed_precision: False      # enable automatic mixed precision for higher performance

  experiment:
    directory: 'US_guidance_TD3_sweep'          # experiment's parent directory
    experiment_name: 'TD3'


# Sequential trainer
# https://skrl.readthedocs.io/en/latest/api/trainers/sequential.html
trainer:
  class: SequentialTrainer
  timesteps: 200000
  environment_info: log
